using System;
using System.Diagnostics;
using System.Numerics;
using System.Runtime.CompilerServices;
using Cake.Core.IO;

namespace Cake.Flutter
{
	/// <summary>
	/// Settings for flutter build apk.
	/// Build an Android APK file from your app..
	/// </summary>
	[CompilerGenerated]
	public sealed class FlutterBuildAppBundleSettings : AutoToolSettings
	{
		/// <summary>
		/// -h, --help                    Print this usage information.
		/// </summary>
		public bool? Help { get; set; }
		/// <summary>
		/// -t, --target=&lt;path&gt;           The main entry-point file of the application, as run on the device. If the --target option is omitted, but a file name is provided on the command line, then that is used instead. (defaults to &quot;lib/main.dart&quot;)
		/// </summary>
		public FilePath Target { get; set; }
		/// <summary>
		/// --debug                   Build a debug version of your app.
		/// </summary>
		public bool? Debug { get; set; }
		/// <summary>
		/// --profile                 Build a version of your app specialized for performance profiling.
		/// </summary>
		public bool? Profile { get; set; }
		/// <summary>
		/// --release                 Build a release version of your app (default mode).
		/// </summary>
		public bool? Release { get; set; }
		/// <summary>
		/// --flavor                  Build a custom app flavor as defined by platform-specific build setup. Supports the use of product flavors in Android Gradle scripts. Supports the use of custom Xcode schemes.
		/// </summary>
		public string Flavor { get; set; }
		/// <summary>
		/// --[no-]pub                Whether to run &quot;flutter packages get&quot; before executing this command. (defaults to on)
		/// </summary>
		public bool? Pub { get; set; }
		/// <summary>
		/// --build-number=&lt;int&gt;      An integer used as an internal version number. Each build must have a unique number to differentiate it from previous builds. It is used to determine whether one build is more recent than another, with higher numbers indicating more recent build. On Android it is used as &#39;versionCode&#39;. On Xcode builds it is used as &#39;CFBundleVersion&#39;
		/// </summary>
		public int? BuildNumber { get; set; }
		/// <summary>
		/// --build-name=&lt;x.y.z&gt;      A &quot;x.y.z&quot; string used as the version number shown to users. For each new version of your app, you will provide a version number to differentiate it from previous versions. On Android it is used as &#39;versionName&#39;. On Xcode builds it is used as &#39;CFBundleShortVersionString&#39;
		/// </summary>
		public string BuildName { get; set; }
        /// <summary>
        /// --split-debug-info=<v1.2.3/> 
        ///  In a release build, this flag reduces application size by storing Dart program symbols in a 
        ///  file on the host rather than in the application.The value of the flag should be a directory where
        ///  program symbol files can be stored for later use. These symbol files contain the information needed to
        ///  symbolize Dart stack traces. For an app built with this flag, the "flutter symbolize" command with the
        ///  right program symbol file is required to obtain a human readable stack trace.
        ///  This flag cannot be combined with "--analyze-size".
        /// </summary>
        public DirectoryPath SplitDebugInfo { get; set; }
        /// <summary>
        /// --[no-]obfuscate
        ///  In a release build, this flag removes identifiers and replaces them with randomized values for the
        /// purposes of source code obfuscation.This flag must always be combined with "--split-debug-info" option,
        /// the mapping between the values and the original identifiers is stored in the symbol map created in the
        /// specified directory.For an app built with this flag, the "flutter symbolize" command with the right
        /// program symbol file is required to obtain a human readable stack trace.
        /// Because all identifiers are renamed, methods like Object.runtimeType, Type.toString, Enum.toString,
        /// Stacktrace.toString, Symbol.toString(for constant symbols or those generated by runtime system) will
        /// return obfuscated results.Any code or tests that rely on exact names will break.
        /// </summary>
        public bool? Obfuscate { get; set; }
        /// <summary>
        /// --dart-define=&lt;foo=bar&gt; 
        /// Additional key-value pairs that will be available as constants from the String.fromEnvironment,
        /// bool.fromEnvironment, int.fromEnvironment, and double.fromEnvironment constructors.
        /// Multiple defines can be passed by repeating "--dart-define" multiple times.
        /// </summary>
        public string DartDefine { get; set; }
        /// <summary>
        /// --[no-]track-widget-creation           
        /// Track widget creation locations. This enables features such as the widget inspector. This
        /// parameter is only functional in debug mode(i.e.when compiling JIT, not AOT).
        /// (defaults to on)
        /// </summary>
        public bool? TrackWidgetCreation { get; set; }
        /// <summary>
        /// --[no-]null-assertions
        /// Perform additional null assertions on the boundaries of migrated and un-migrated code. This setting is
        /// not currently supported on desktop devices.
        /// </summary>
        public bool? NullAssertions { get; set; }
        /// <summary>
        /// --[no-]analyze-size
        /// Whether to produce additional profile information for artifact output size. This flag is only supported
        /// on "--release" builds.When building for Android, a single ABI must be specified at a time with the
        ///  "--target-platform" flag.When building for iOS, only the symbols from the arm64 architecture are used
        /// to analyze code size.
        /// By default, the intermediate output files will be placed in a transient directory in the build
        ///  directory.This can be overridden with the "--code-size-directory" option.
        /// This flag cannot be combined with "--split-debug-info".
        /// </summary>
        public bool? AnalyzeSize { get; set; }
        /// <summary>
        /// --code-size-directory
        /// The location to write code size analysis files. If this is not specified, files are written to a
        /// temporary directory under the build directory.
        /// </summary>
        public DirectoryPath CodeSizeDirectory { get; set; }
        /// <summary>
        /// -P, --android-project-arg
        /// Additional arguments specified as key=value that are passed directly to the gradle project via
        /// the -P flag.These can be accessed in build.gradle via the "project.property" API.
        /// </summary>
        public string AndroidProjectArg { get; set; }
        /// <summary>
        /// --[no-]deferred-components             
        /// Setting to false disables building with deferred components. All deferred code will be
        /// compiled into the base app, and assets act as if they were defined under the regular assets
        /// section in pubspec.yaml.This flag has no effect on non-deferred components apps.
        /// (defaults to on)
        /// </summary>
        public bool? DeferredComponents { get; set; }
        /// <summary>
        /// --[no-]validate-deferred-components    When enabled, deferred component apps will fail to build if setup problems are detected that
        /// would prevent deferred components from functioning properly.The tooling also provides
        /// guidance on how to set up the project files to pass this verification.Disabling setup
        /// verification will always attempt to fully build the app regardless of any problems detected.
        /// Builds that are part of CI testing and advanced users with custom deferred components
        /// implementations should disable setup verification.This flag has no effect on non-deferred
        /// components apps.
        /// (defaults to on)
        /// </summary>
        public bool? ValidateDeferredComponents { get; set; }
        /// <summary>
        /// --target-platform         [android-arm (default), android-arm64]
        /// </summary>
        public TargetPlatform? TargetPlatform { get; set; }
	}
}